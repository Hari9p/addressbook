pipeline{
    agent none
    tools{
        jdk 'myjava'
        maven 'mymaven'
    }
    // parameters {
        //string(name:'Env', defaultValue:'Test' , description: 'env to deploy')
       // booleanParam(name: 'executeTests', defaultValue: true, description: 'decide to run tc')
     //   choice(name: 'CHOICES', choices: ['1.1', '1.2', '1.3'] )
   // }

   environment {
        DEV_SERVER = 'ec2-user@15.206.178.131'
        IMAGE_NAME='hari9p/privaterepo'
   }

    stages{
        stage('compile') {
            agent any
            steps {
                script { echo "Compile the code"
                        // echo "deploying to env: ${params.Env}"
                         sh "mvn compile"

                }
            }
        }

        stage('UnitTest') {
            agent {label 'linux-slave2'}
           // agent any
            //when {
              //  expression {
//
  //                  params.executeTests == true
    //            }
      //      }
            steps {
                script { echo "Run the unit tests"
                sh "mvn test"
                    
                }
            }
            post{
                always {
                  junit  'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Package') {
            agent any
            
            steps {
                script { 
                sshagent(['DEV_SERVER_PACKING']) {
                    
                     withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')])
                         echo "package the code"
                 //     echo "packing the code version ${params.CHOICES}"
                         sh "scp -o StrictHostKeyChecking=no server-config.sh ${DEV_SERVER}:/home/ec2-user"
                         sh "ssh -o StrictHostKeyChecking=no ${DEV_SERVER} 'bash ~/server-config.sh ${IMAGE_NAME} ${BUILD_NUMBER}'" 

                         sh "ssh ${DEV_SERVER} sudo docker login -u ${USERNAME} -p ${PASSWORD}"
                         sh "ssh ${DEV_SERVER} sudo docker push ${IMAGENAME}:${BUILD_NUMBER}"
                         sh "ssh ${DEV_SERVER} sudo docker run -P ${IMAGENAME}:${BUILD_NUMBER}"
                         }
                        
                }         
                
                    
                
            }
        }
        stage('Deploy') {
            agent any
            input {

            message "select the version to package"
            ok "version selected"    
            parameters{
                choice(name: 'NEWVERSION', choices: ['3', '4', '5'] )
            }
            }
            steps {
                script { echo "package the code"
                   //      echo "packing the code version ${params.CHOICES}"
                    
                }
            }
        }
    }
}
